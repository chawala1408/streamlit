import streamlit as st
import pandas as pd
import pyrebase

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ config ‡∏Ç‡∏≠‡∏á Firebase
config = {
    "apiKey": "AIzaSyAUOr-wqlUhnIVeGgRKOHXkFAqCMHEy_2g",
    "authDomain": "your-project.firebaseapp.com",
    "databaseURL": "https://check-4c4c4-default-rtdb.asia-southeast1.firebasedatabase.app/",
    "storageBucket": ""  # üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡∏ß‡πà‡∏≤‡∏á
}

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase
firebase = pyrebase.initialize_app(config)
db = firebase.database()

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase ‡∏ó‡∏±‡πâ‡∏á Pass ‡πÅ‡∏•‡∏∞ NG
result_pass = db.child('Pass').child('MAC ID').get().val()
result_ng = db.child('NG').child('MAC ID').get().val()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô DataFrame
def convert_to_dataframe(result, status):
    if result:
        data_list = []
        for key, value in result.items():
            if isinstance(value, dict):
                value['ID'] = key
                value['Status'] = status
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° Location ‡πÄ‡∏õ‡πá‡∏ô 'N/A' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• NG
                if status == 'NG' and 'Localtion' not in value:
                    value['Localtion'] = 'N/A'
                data_list.append(value)
            else:
                data_dict = {'ID': key, 'Value': value, 'Status': status}
                if status == 'NG':
                    data_dict['Localtion'] = 'N/A'
                data_list.append(data_dict)
        return pd.DataFrame(data_list)
    return pd.DataFrame()

# ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
df_pass = convert_to_dataframe(result_pass, 'Pass')
df_ng = convert_to_dataframe(result_ng, 'NG')

# ‡∏£‡∏ß‡∏° DataFrame
df = pd.concat([df_pass, df_ng], ignore_index=True)

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ df ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if not df.empty:
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î columns ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
    selected_columns = [
        'ID',
        'Board',
        'Localtion',
        'Modbus_RTU',
        'Modbus_TCP',
        'Volt_judge',
        'cpu_judge',
        'RSSI_judge',
        'LED',
    ]

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ columns ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô DataFrame
    existing_columns = [col for col in selected_columns if col in df.columns]

    if existing_columns:
        df_selected = df[existing_columns]

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á filters
        col1, col2 = st.columns(2)
        
        with col1:
            # Filter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Location (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ Location)
            st.write("üè¢ **‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:**")
            # ‡∏Å‡∏£‡∏≠‡∏á Location ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'N/A' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô dropdown
            valid_locations = sorted([loc for loc in df_selected['Localtion'].unique() if loc != 'N/A'])
            locations = ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] + valid_locations
            selected_location = st.selectbox("", locations)

        with col2:
            # Filter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Board
            st.write("üõ†Ô∏è **‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏≠‡∏£‡πå‡∏î:**")
            boards = ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] + sorted(df_selected['Board'].unique())
            selected_board = st.selectbox("", boards)

        # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° filters
        df_filtered = df_selected.copy()
        
        if selected_location != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
            df_filtered = df_filtered[df_filtered['Localtion'] == selected_location]
            
        if selected_board != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
            df_filtered = df_filtered[df_filtered['Board'] == selected_board]

        st.write("üìã **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase:**")
        st.dataframe(df_filtered, use_container_width=True)

        if not df_filtered.empty:
            with st.expander("‚úèÔ∏è **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Location ‡∏Ç‡∏≠‡∏á MAC ID**", expanded=False):
                # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å MAC ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Location
                selected_mac = st.selectbox("üîç **‡πÄ‡∏•‡∏∑‡∏≠‡∏Å MAC ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Location:**", df_filtered['ID'].unique())

                if selected_mac:
                    # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Location ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á MAC ID ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                    current_location = df_filtered[df_filtered['ID'] == selected_mac]['Localtion'].values[0]

                    # ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Location
                    new_location = st.text_input("‚úèÔ∏è **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Location:**", value=current_location)

                    if st.button("üíæ **‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á**"):
                        try:
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ MAC ID ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Pass ‡∏´‡∏£‡∏∑‡∏≠ NG
                            mac_path = None
                            if selected_mac in df_pass['ID'].values:
                                mac_path = f"/Pass/MAC ID/{selected_mac}"
                            elif selected_mac in df_ng['ID'].values:
                                mac_path = f"/NG/MAC ID/{selected_mac}"

                            if mac_path:
                                # ‚úÖ ‡πÉ‡∏ä‡πâ firebase.put() ‡πÇ‡∏î‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î 'Localtion' ‡πÄ‡∏õ‡πá‡∏ô key
                                db.child(mac_path).update({"Localtion": new_location})

                                st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Location ‡πÄ‡∏õ‡πá‡∏ô `{new_location}` ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                                st.rerun()  # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
                            else:
                                st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö MAC ID ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•!")
                        except Exception as e:
                            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")


        if selected_location != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' and selected_board != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
            # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ MAC ‡∏à‡∏≤‡∏Å input
            MAC = st.text_input("üîç **‡∏Å‡∏£‡∏≠‡∏Å MAC ID:**")

            if MAC:
                # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô DataFrame ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö MAC ‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô
                df_mac_filtered = df[df['ID'] == MAC]
                
                if not df_mac_filtered.empty:
                    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô selected_columns
                    columns_to_show = [col for col in df_mac_filtered.columns if col not in selected_columns]
                    df_mac_filtered = df_mac_filtered[columns_to_show]
                    
                    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Topic-Value
                    df_topic_value = df_mac_filtered.T.reset_index()
                    df_topic_value.columns = ["Topic", "Value"]
                    
                    st.dataframe(df_topic_value, use_container_width=True)
                else:
                    st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MAC ID: `{MAC}`")
    else:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡πâ")
else:
    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
